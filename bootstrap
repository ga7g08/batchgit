#!/bin/bash

# todo
# check that multiple remotes work by testing without grep "fetch"
# print number options to match number of remotes
# user then picks number to use for remote going forwards
# at the end of backup offer to build batchgit takeaway
# user transfers that to ~/ of new host
# offer to delete takeaway at the end
# batchgit --clone then checks for it and creates ~/.batchgit
# check that wc -l clone remote matches local
# if not issue warning
# Arrays to pull out clone remote and local
# proceed through themn by n
# cd into local then git clone remote
# run batchgit find afterwards to build rc file
# run batchgit status after cloning
# do some backwards capability stuff if batchgit already exists

# Define some useful variables for printing
bold=`tput bold`
normal=`tput sgr0`

bootstrapchoice () {
        echo "Would you like to add this repository to the bootstrap (Y/N)?: "
        read addornay </dev/tty
        case $addornay in 
                [Yy][eE][sS]|[yY])
                        add=yes
                        ;;
                [Nn][Oo]|[Nn])
                        add=no
                        ;;
                [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee])
                        add=leave
                        ;;
                *)
                        add=nonsense
                        ;;
        esac
        if [[ $add == "no" ]]; then
                echo "Not added"
                unset add
        fi
        if [[ $add == "yes" ]]; then
                echo $remotesClean >> ~/.batchgit/bootstraprepo
                relativeFilepath=$(dirname $locdir)
                relativeFilepath2=$(echo $relativeFilepath | sed -e 's|^/[^/]*||' -e 's|^/[^/]*||' -e 's|^/||')
                echo "$relativeFilepath2" >> ~/.batchgit/bootstrapdir
                echo "Added"
                unset add
        fi
        if [[ $add == "leave" ]]; then
                echo "Goodbye!"
                unset add
                exit
        fi
        if [[ $add == "nonsense" ]]; then
                echo "That choice was unclear"
                unset add
                bootstrapchoice
        fi
}

checkrepodirmatch () {
        clones=( $(cat ~/.batchgit/bootstraprepo) )
        localRepo=( $(cat ~/.batchgit/bootstrapdir) )
        lenclones=$(wc -l < ~/.batchgit/bootstraprepo)
        lenlocalRepo=$(wc -l < ~/.batchgit/bootstrapdir)
        if [[ $lenlocalRepo != $lenclones ]]; then
                echo "The number of directories does not match the number of remote locations"
                exit
        fi
}

confirmClone () {
        echo "Would you like to clone this repository to this location? (Y/N): "
        read cloneornay </dev/tty
        case $cloneornay in 
                [Yy][eE][sS]|[yY])
                        clonethis=yes
                        ;;
                [Nn][Oo]|[Nn])
                        clonethis=no
                        ;;
                [Qq][Uu][Ii][Tt]|[Qq]|[Ee][Xx][Ii][Tt]|[Qq]|[Ee])
                        clonethis=leave
                        ;;
                *)
                        clonethis=nonsense
                        ;;
        esac
        if [[ $clonethis == "no" ]]; then
                echo "Not cloned"
                unset clonethis
        fi
        if [[ $clonethis == "yes" ]]; then
                echo "Cloned"
                unset clonethis
        fi
        if [[ $clonethis == "leave" ]]; then
                echo "Goodbye!"
                unset clonethis
                exit
        fi
        if [[ $clonethis == "nonsense" ]]; then
                echo "That choice was unclear"
                unset clonethis
                confirmClone
        fi
}

if [[ $1 == "--backup" ]]; then
        if [[ -d ~/batchgit-takeaway ]]; then
                echo "Building a takeaway box for you at ~/batchgit-takeaway"
                echo "This will be where the files for bootstrapping will live"
                mkdir ~/batchgit-takeaway
                echo "It might be an idea for you to put a copy of batchgit in the folder too"
        fi
        if [[ -f ~/.batchgit/bootstraprepo ]]; then
                echo -e "Bootstraprepo file already exists, making a back up at ~/.batchgit/bootstraprepo.bak\n"
                mv ~/.batchgit/bootstraprepo ~/.batchgit/bootstraprepo.bak
        fi
        if [[ -f ~/.batchgit/bootstrapdir ]]; then
                echo -e "Bootstrapdir file already exists, making a back up at ~/.batchgit/bootstrapdir.bak\n"
                mv ~/.batchgit/bootstrapdir ~/.batchgit/bootstrapdir.bak
        fi
        if [[ ! -d ~/.batchgit ]]; then
                echo "Batchgit directory does not exist, making a directory at ~/.batchgit"
                mkdir ~/.batchgit
                cp ~/.batchgitrc ~/.batchgit/batchgitrc
        elif [[ -d ~/.batchgit ]]; then
                cp ~/.batchgitrc ~/.batchgit/batchgitrc
        fi
        while read locdir; do
                echo -e "Local repository is $locdir"
                cd /$locdir
                remotes=$(git remote -v | grep "fetch")
                remotesClean=$(echo $remotes | sed -e 's/origin//' | sed -e 's/ (fetch)//')
                remotePresent=1
                remoteTotal=$(echo $remotes | grep -c "fetch")
                if [[ $remoteTotal -gt "1" ]]; then
                        echo "The are $remoteTotal remotes"
                        while [[ $remotePresent -le $remoteTotal ]]; do
                                let remotePresent+=1
                                echo $remotes
                                echo $($remotes | grep -m$remotePresent)
                        done
                else
                        echo "There is only one remote branch"
                        echo -e "Which is:${bold}$remotesClean${normal}"
                fi
                bootstrapchoice
                echo -e "\n"
        done < ~/.batchgit/batchgitrc
        sed -e 's|^|/home/$USER/|g' -i ~/.batchgit/bootstrapdir
        checkrepodirmatch
fi

if [[ $1 == "--clone" ]]; then
        checkrepodirmatch
        let i=0
        for dir in ${localRepo[@]}; do
                eval cd ${localRepo[$i]}
                echo "this dir is ${bold}$(pwd)${normal}"
                echo "which should match ${localRepo[$i]}"
                echo "for cloning ${bold}${clones[$i]}${normal}"
                let i+=1
                confirmClone
                echo -e "\n"
        done 
fi
