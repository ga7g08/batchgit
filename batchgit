#!/bin/bash

# Define some useful variables for printing
bold=`tput bold`
normal=`tput sgr0`

#add new repo to config file
if [[ $1 == "-add" ]] || [[ $1 == "-a" ]]; then
        if [[ ! -z $2 ]]; then 
                if [[ ! -f ~/.batchgitrc ]]; then
                        touch ~/.batchgitrc
                        echo -e "making ~/.batchgitrc file \n"
                fi
                if [[ $2 == "./" ]]; then
                        echo $(pwd) >> ~/.batchgitrc
                elif [[ $2 != "*/*" ]]; then
                        PWD=$(pwd)
                        pwdrepdir=$PWD"/"$2
                        echo "adding $pwdrepdir"
                        echo $pwdrepdir >> ~/.batchgitrc
                else
                        echo $2 >> ~/.batchgitrc
                        echo -e "Added $2 to the ~/.batchgitrc file"
                fi
                sort -u -o ~/.batchgitrc ~/.batchgitrc
        else
                echo "you need to add the directory after the flag!"
        fi
        choice=y
fi


if [[ $1 == "-addrecursive" ]] || [[ $1 == "-ar" ]]; then
        if [[ -z $2 ]]; then 
                findrecurgit=( $(find ./ -type d -name .git | xargs -n 1 dirname) )
                here=y
        else
                findrecurgit=( $(find $2 -type d -name .git | xargs -n 1 dirname) )
                here=n
        fi
        for dir in "${findrecurgit[@]}"; do
                if [[ $here == "y" ]] || [[ $2 == "./" ]]; then
                        repdir=$(echo $dir | cut -c 2-)
                        PWD=$(pwd)
                        pwdrepdir=$PWD$repdir
                else
                        pwdrepdir=$dir
                fi
                        echo -e "$pwdrepdir"
                        read -p "Would you like to watch this repository? (y/n): " -n 1 -r
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                                echo -e "\n$pwdrepdir" >> ~/.batchgitrc
                        fi
                        echo -e "\n"
        done
        sort -u -o ~/.batchgitrc ~/.batchgitrc
        choice=y
fi

#removes single repo manually
if [[ $1 == "-rm" ]] || [[ $1 == "-r" ]] || [[ $1 == "-remove" ]]; then
        if [[ ! -z $2 ]]; then 
                if [[ $2 == "./" ]]; then
                        sed -e "s|$(pwd)||g" -i  ~/.batchgitrc
                elif [[ $2 != "*/*" ]]; then
                        PWD=$(pwd)
                        pwdrepdir=$PWD"/"$2
                        echo "removing $pwdrepdir"
                        sed -e "s|$pwdrepdir||g" -i  ~/.batchgitrc
                else
                        sed -e "s|$2||g" -i  ~/.batchgitrc
                fi
                sort -u -o ~/.batchgitrc ~/.batchgitrc
        else
                echo "you need to add the directory after the flag!"
        fi
        choice=y
fi

#tests for config file, or runs if forced to redo config
if [[ $1 == "-f" ]] || [[ ! -f ~/.batchgitrc ]] || [[ $1 == "-find" ]]; then
        if [[ ! -z $2 ]]; then
                findgit=( $(find $2 -type d -name .git | xargs -n 1 dirname) )
        else
                findgit=( $(find ~ -type d -name .git | xargs -n 1 dirname) )
        fi
        numfind=${#findgit[@]}
        echo -e "There are $numfind git repositories \n"

        if [[ ! -f ~/.batchgitrc ]]; then
                touch ~/.batchgitrc
                echo -e "making ~/.batchgitrc file \n"
        else
                mv ~/.batchgitrc ~/.batchgitrc.bak
                touch ~/.batchgitrc
                echo -e "making a new ~/.batchgitrc file and backing up old to ~/.batchgitrc.bak \n"
        fi

        for gdir in "${findgit[@]}"; do
                        echo -e "$gdir"
                        read -p "Would you like to watch this repository? (y/n): " -n 1 -r
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                                echo $gdir >> ~/.batchgitrc
                        fi
                        echo -e "\n"
        done
        choice=y
fi


#multiple choice for no option or post config
if [[ $# == 0 ]] || [[ $choice == "y" ]]; then
while true; do
        echo -e """
1) \t git status
2) \t git pull
3) \t git pull and push
4) \t git push only
5) \t quit
        """
        read -p "What happens now? " whatnow
        case $whatnow in
                [1]* ) now=gstatus;break;;
                [2]* ) now=gpull;break;;
                [3]* ) now=gpullpush;break;;
                [4]* ) now=gpush;break;;
                [5]* ) now=quit;break;;
                [quit]* ) now=quit;break;;
                [exit]* ) now=quit;break;;
        esac
done
fi

#quits script if option selected
if [[ $now == "quit" ]]; then
        printf "\n"
        exit
fi

#Array where paths are held
paths=( $(cat ~/.batchgitrc) )     

#Check to ensure all local directories still exist
let i=1
for dir in "${paths[@]}"; do
        let i+=1
        if [[ ! -d $dir ]]; then
                echo -e "The $dir directory doesn't exist anymore and has been removed from the config file"
                sed -e "s|$dir||g" -i  ~/.batchgitrc
        fi
done
sed -e '/^$/d' -i ~/.batchgitrc 
paths=( $(cat ~/.batchgitrc) )     

#spacing for neatness
printf "\n"

#git status
if [[ $1 == "-status" ]] || [[ $now == "gstatus" ]] || [[ $1 == "-s" ]]; then
        let i=1
        for dir in "${paths[@]}"; do
                let i+=1
                cd $dir
                REPO=${PWD##*/}
                echo ${bold}"Repository: $REPO ${normal}"
                untracked=$(git status | grep -A 3 'Untracked' | tail -n 1 | sed -e 's/^[ \t]*//g' -e 's/#//g')
                modified=$(git status | grep "modified" | sed -e 's/.*modified://g' -e 's/^[ \t]*//g')
                commit=$(git status | grep "commit" | sed -e 's/.*by //g' -e 's/\.//g' -e 's/#//g' | head -n 1)
                if [[ ! -z $untracked ]]; then
                        echo -e "Untracked: \n\e[1;31m$untracked\e[0m"
                fi
                if [[ ! -z $modified ]]; then
                        echo -e "Modified: \n\e[1;31m$modified\e[0m"
                fi
                if [[ $commit != *"nothing to commit"* ]] && [[ $commit != *"not staged"* ]]; then
                        echo -e "Commit: \n\e[1;31m$commit\e[0m"
                fi
                echo
        done
exit
fi

#git push
if [[ $1 == "-push" ]] || [[ $now == "gpush" ]] || [[ $now == "gpullpush" ]] || [[ $1 == "-u" ]] || [[ $1 == "-n" ]] || [[ $1 == "-po" ]] || [[ $1 == "-pushonly" ]]; then
	let i=1
	for dir in "${paths[@]}"; do
		let i+=1
		cd $dir
        REPO=${PWD##*/}
        echo ${bold}"Repository: $REPO ${normal}"
        if [[ $1 == "-pushonly" ]] || [[ $1 == "-po" ]] || [[ $now == "gpush" ]] ; then
                git push
        else
                git pull
                git push
        fi
        printf "\n"
	done
        if [[ $1 == "-n" ]]; then
                echo -e "\nAll done for the day!\n"
                        printf """
+      o     +              o   
    +             o     +       +
o          +
    o  +           +        +
+        o     o       +        o
-_-_-_-_-_-_-_,------,      o 
_-_-_-_-_-_-_-|   /\_/\  
-_-_-_-_-_-_-~|__( ^ .^)  +     +  
_-_-_-_-_-_-_-''  ''      
+      o         o   +       o
    +         +
o        o         o      o     +
    o           +
+      +     o        o      +    
\n"""
        fi
exit
fi

#git pull
if [[ $1 == "-pull" ]] || [[ $now == "gpull" ]] || [[ $1 == "-d" ]]; then
	let i=1
	for dir in "${paths[@]}"; do
		let i+=1
		cd $dir
        REPO=${PWD##*/}
        echo ${bold}"Repository: $REPO ${normal}"
		git pull
        printf "\n"
	done
printf "\n"
exit
fi

#For people too lazy to do proper commits, cp flag will push as well
if [[ $1 == "-commit" ]] || [[ $1 == "-c" ]] || [[ $1 == "-cp" ]]; then
        let i=1
        for dir in "${paths[@]}"; do
                let i+=1
                cd $dir
                numMod=$(git status | grep -c "modified")
                numNew=$(git status | grep -c "new file")
                numUntr=$(git status | grep -c "untracked")
                numTotal=$(($numNew + $numMod + $numUntr))
                REPO=${PWD##*/}
                echo ${bold}"Repository: $REPO ${normal}"
                echo -e "Number modified: $numTotal\n"
                if [[ $numTotal != "0" ]]; then
                        commitMessage=$(curl -s http://whatthecommit.com/ | grep -A 1 'id="content"' | sed 's/.*<p>//' | tail -n 1)
                        git add .
                        git add -A
                        git commit -m "$commitMessage"
                        printf "\n"
                        if [[ $1 == "-cp" ]]; then
                                git push
                        fi
                fi
        done
        exit
fi

#error message
echo "sorry, that command didn't work! Try again"
printf "\n"
exit
